/** biome-ignore-all lint/suspicious/noTemplateCurlyInString: <If have any code examples, will have unused warnings> */
import dayjs from 'dayjs'
import type { SlideData } from '@/types/slide-types'

const now = dayjs()
const dateIStartedCoding = dayjs('2018-01-01')
const amountOfYearsCoding = now.diff(dateIStartedCoding, 'years')

export const slideData: SlideData[] = [
	{
		id: 1,
		type: 'title',
		title: 'Introdu√ß√£o aos Testes Automatizados',
		subtitle: 'Entendendo testes atrav√©s de exemplos simples e pr√°ticos',
	},
	{
		id: 2,
		type: 'presenter',
		title: 'Quem est√° apresentando?',
		presenter: {
			name: 'Bruno Mestanza',
			role: 'Developer Instructor',
			company: 'Rocketseat',
			bio: `Desenvolvedor apaixonado por educa√ß√£o e produto com mais de ${amountOfYearsCoding} anos de experi√™ncia em desenvolvimento web. Especialista em JavaScript, React, Next JS, Node.js, produto e Design.`,
			imageUrl: 'http://github.com/brunomestanza.png',
			linkedin: 'https://www.linkedin.com/in/brunomestanza',
			github: 'http://github.com/brunomestanza',
			email: 'joao.silva@techcorp.com.br',
			website: 'https://joaosilva.dev',
			expertise: [
				'JavaScript/TypeScript',
				'React & Next.js',
				'React Native',
				'Node.js',
				'Design Engineering',
				'Produtos digitais',
				'Arquitetura de Software',
			],
			achievements: [
				`Mais de ${amountOfYearsCoding} anos de experi√™ncia em desenvolvimento FullStack e Mobile`,
				'Mentor e educador de tecnologia e inova√ß√£o',
				'Entusiasta de Design e desenvolvimento de produtos digitais',
				'P√≥s Graduado em desenvolvimento FullStack',
			],
		},
	},
	{
		id: 2,
		type: 'concept',
		title: 'Introdu√ß√£o aos Testes Automatizados',
		conceptTitle: 'üöÄ Por que os Testes Automatizados Importam:',
		concepts: [
			'Fornecem feedback mais r√°pido durante os ciclos de desenvolvimento',
			'Aumentam a qualidade geral e confiabilidade do c√≥digo',
			'Reduzem o esfor√ßo de testes manuais e erros humanos',
			'Permitem refatora√ß√£o e atualiza√ß√µes de c√≥digo com confian√ßa',
			'Suportam integra√ß√£o cont√≠nua e implanta√ß√£o (CI/CD)',
			'Capturam bugs antes que cheguem aos ambientes de produ√ß√£o',
			'Economizam tempo e dinheiro a longo prazo',
			'Melhoram a produtividade da equipe e confian√ßa do desenvolvedor',
			'Fornecem documenta√ß√£o viva do comportamento do sistema',
			'Permitem testes de regress√£o a cada mudan√ßa de c√≥digo',
		],
		imageUrl: '/test-introduction.png',
	},
	{
		id: 3,
		type: 'concept',
		title: 'O que s√£o Testes Automatizados?',
		conceptTitle: 'ü§ñ Testes Automatizados s√£o:',
		concepts: [
			'Programas que verificam se seu c√≥digo funciona corretamente',
			'Executam automaticamente sem interven√ß√£o humana',
			'Parte essencial do ciclo de vida de desenvolvimento de software (SDLC)',
			'V√™m em diferentes tipos: Testes Unit√°rios, de Integra√ß√£o e de Interface',
			'Fornecem documenta√ß√£o de como seu c√≥digo deve se comportar',
			'Agem como uma rede de seguran√ßa ao fazer mudan√ßas no c√≥digo',
			'Executam consistentemente e repetidamente com os mesmos resultados',
			'Podem ser integrados em pipelines de build e implanta√ß√£o',
		],
		imageUrl: '/what-is-testing.png',
	},
	{
		id: 4,
		type: 'pyramid',
		title: 'A Pir√¢mide de Testes',
		imageUrl: '/test-pyramid.png',
	},
	{
		id: 5,
		type: 'concept',
		title: 'O que s√£o Testes Unit√°rios?',
		conceptTitle: 'üî¨ Testes Unit√°rios:',
		concepts: [
			'Testam fun√ß√µes ou componentes individuais em isolamento',
			'Focam nas menores partes test√°veis de uma aplica√ß√£o',
			'Devem ser r√°pidos, confi√°veis e independentes de depend√™ncias externas',
			'F√°ceis de escrever, manter e entender',
			'Formam a base da sua su√≠te de testes (70-80% de todos os testes)',
			'Ajudam a capturar bugs cedo no processo de desenvolvimento',
			'Fornecem feedback imediato durante a codifica√ß√£o',
			'Devem testar um comportamento espec√≠fico com asser√ß√µes claras',
			'Usam mocks ou stubs para isolar a unidade sob teste',
			'Executam em milissegundos, permitindo ciclos de desenvolvimento r√°pidos',
			'Tem m√∫ltiplos casos de teste cobrindo diferentes cen√°rios',
			'Cobre casos extremos e condi√ß√µes de erro, com tratativas descritivas',
		],
		imageUrl: '/what-are-unit-tests.png',
	},
	{
		id: 6,
		type: 'code-example',
		title: 'Exemplo de Teste Unit√°rio',
		implementation:
			'Vamos criar uma fun√ß√£o calculadora que executa opera√ß√µes aritm√©ticas b√°sicas. Nosso teste unit√°rio verificar√° se cada opera√ß√£o funciona corretamente com v√°rias entradas, incluindo casos extremos como divis√£o por zero e opera√ß√µes inv√°lidas.',
		codeToTest: `// Fun√ß√£o calculadora para testar
function calcular(operacao, a, b) {
  switch (operacao) {
    case 'somar':
      return a + b;
    case 'subtrair':
      return a - b;
    case 'multiplicar':
      return a * b;
    case 'dividir':
      if (b === 0) {
        throw new Error('Divis√£o por zero');
      }
      return a / b;
    default:
      throw new Error('Opera√ß√£o inv√°lida');
  }
}`,
		testCode: `// Testes unit√°rios para calculadora
function testarCalculadora() {
  // Testar adi√ß√£o
  if (calcular('somar', 5, 3) !== 8) {
    throw new Error('Teste de adi√ß√£o falhou');
  }
  
  // Testar subtra√ß√£o
  if (calcular('subtrair', 10, 4) !== 6) {
    throw new Error('Teste de subtra√ß√£o falhou');
  }
  
  // Testar multiplica√ß√£o
  if (calcular('multiplicar', 3, 4) !== 12) {
    throw new Error('Teste de multiplica√ß√£o falhou');
  }
  
  // Testar divis√£o
  if (calcular('dividir', 15, 3) !== 5) {
    throw new Error('Teste de divis√£o falhou');
  }
  
  // Testar divis√£o por zero
  try {
    calcular('dividir', 10, 0);
    throw new Error('Deveria ter lan√ßado erro de divis√£o por zero');
  } catch (error) {
    if (error.message !== 'Divis√£o por zero') {
      throw new Error('Erro errado para divis√£o por zero');
    }
  }
  
  // Testar opera√ß√£o inv√°lida
  try {
    calcular('modulo', 10, 3);
    throw new Error('Deveria ter lan√ßado erro de opera√ß√£o inv√°lida');
  } catch (error) {
    if (error.message !== 'Opera√ß√£o inv√°lida') {
      throw new Error('Erro errado para opera√ß√£o inv√°lida');
    }
  }
  
  console.log('‚úì Todos os testes unit√°rios da calculadora passaram!');
}

testarCalculadora();`,
	},
	{
		id: 7,
		type: 'concept',
		title: 'O que s√£o Testes de Integra√ß√£o?',
		conceptTitle: 'üîó Testes de Integra√ß√£o:',
		concepts: [
			'Testam como m√∫ltiplas unidades trabalham juntas como um grupo',
			'Verificam se diferentes partes da aplica√ß√£o interagem corretamente',
			'Focam no fluxo de dados e comunica√ß√£o entre componentes',
			'Capturam problemas que testes unit√°rios podem perder nas intera√ß√µes de componentes',
			'Mais complexos que testes unit√°rios, mas fornecem cobertura mais ampla do sistema',
			'Testam cen√°rios realistas envolvendo m√∫ltiplas fun√ß√µes ou m√≥dulos',
			'Garantem que componentes integrados funcionem como um sistema coeso',
			'Frequentemente envolvem testes com depend√™ncias externas ou APIs',
			'Tipicamente comp√µem 20-30% da sua su√≠te de testes',
			'Podem requerer bancos de dados ou servi√ßos',
		],
		imageUrl: '/what-are-integration-tests.png',
	},
	{
		id: 8,
		type: 'code-example',
		title: 'Exemplo de Teste de Integra√ß√£o',
		conceptTitle: 'üîó Caracter√≠sticas do Teste de Integra√ß√£o:',
		implementation:
			'Vamos criar um sistema de gerenciamento de usu√°rios com fun√ß√µes para valida√ß√£o de usu√°rio, armazenamento e notifica√ß√£o. Nosso teste de integra√ß√£o verificar√° se o processo completo de registro de usu√°rio funciona corretamente, testando como todos os componentes interagem juntos, incluindo tratamento de erros e persist√™ncia de dados.',
		codeToTest: `// Sistema de gerenciamento de usu√°rios
const usuarios = [];

function validarUsuario(dadosUsuario) {
  if (!dadosUsuario.email || !dadosUsuario.email.includes('@')) {
    return { valido: false, erro: 'Formato de email inv√°lido' };
  }
  if (!dadosUsuario.nome || dadosUsuario.nome.length < 2) {
    return { valido: false, erro: 'Nome deve ter pelo menos 2 caracteres' };
  }
  if (!dadosUsuario.senha || dadosUsuario.senha.length < 6) {
    return { valido: false, erro: 'Senha deve ter pelo menos 6 caracteres' };
  }
  return { valido: true };
}

function salvarUsuario(dadosUsuario) {
  const usuarioExistente = usuarios.find(u => u.email === dadosUsuario.email);
  if (usuarioExistente) {
    throw new Error('Usu√°rio j√° existe');
  }
  
  const novoUsuario = { 
    id: usuarios.length + 1, 
    ...dadosUsuario, 
    criadoEm: new Date().toISOString() 
  };
  usuarios.push(novoUsuario);
  return novoUsuario;
}

function enviarEmailBoasVindas(usuario) {
  // Simular envio de email com poss√≠vel falha
  if (usuario.email.includes('invalido')) {
    throw new Error('Falha ao enviar email');
  }
  return \`Email de boas-vindas enviado para \${usuario.email}\`;
}

function registrarUsuario(dadosUsuario) {
  try {
    const validacao = validarUsuario(dadosUsuario);
    if (!validacao.valido) {
      return { sucesso: false, erro: validacao.erro };
    }
    
    const usuario = salvarUsuario(dadosUsuario);
    const resultadoEmail = enviarEmailBoasVindas(usuario);
    
    return {
      sucesso: true,
      usuario: usuario,
      mensagem: resultadoEmail
    };
  } catch (error) {
    return { sucesso: false, erro: error.message };
  }
}`,
		testCode: `// Teste de integra√ß√£o para registro de usu√°rio
function testarRegistroUsuario() {
  // Limpar array de usu√°rios para teste limpo
  usuarios.length = 0;
  
  // Teste 1: Registro bem-sucedido
  const usuarioValido = {
    nome: 'Jo√£o Silva',
    email: 'joao@exemplo.com',
    senha: 'senhaSegura123'
  };
  
  const resultado = registrarUsuario(usuarioValido);
  
  if (!resultado.sucesso) {
    throw new Error('Registro de usu√°rio v√°lido falhou: ' + resultado.erro);
  }
  
  if (resultado.usuario.nome !== 'Jo√£o Silva') {
    throw new Error('Nome do usu√°rio n√£o foi salvo corretamente');
  }
  
  if (!resultado.mensagem.includes('Email de boas-vindas enviado')) {
    throw new Error('Email de boas-vindas n√£o foi enviado');
  }
  
  if (usuarios.length !== 1) {
    throw new Error('Usu√°rio n√£o foi salvo no banco de dados');
  }
  
  // Teste 2: Registro de usu√°rio duplicado
  const resultadoDuplicado = registrarUsuario(usuarioValido);
  
  if (resultadoDuplicado.sucesso) {
    throw new Error('Usu√°rio duplicado n√£o deveria se registrar');
  }
  
  if (usuarios.length !== 1) {
    throw new Error('Usu√°rio duplicado foi salvo no banco de dados');
  }
  
  // Teste 3: Registro com email inv√°lido
  const usuarioInvalido = {
    nome: 'Maria Silva',
    email: 'email-invalido',
    senha: 'senha123'
  };
  
  const resultadoInvalido = registrarUsuario(usuarioInvalido);
  
  if (resultadoInvalido.sucesso) {
    throw new Error('Usu√°rio inv√°lido n√£o deveria se registrar');
  }
  
  if (!resultadoInvalido.erro.includes('Formato de email inv√°lido')) {
    throw new Error('Mensagem de erro errada para email inv√°lido');
  }
  
  // Teste 4: Falha no envio de email
  const usuarioFalhaEmail = {
    nome: 'Usu√°rio Teste',
    email: 'invalido@exemplo.com',
    senha: 'senha123'
  };
  
  const resultadoFalhaEmail = registrarUsuario(usuarioFalhaEmail);
  
  if (resultadoFalhaEmail.sucesso) {
    throw new Error('Registro deveria falhar quando envio de email falha');
  }
  
  console.log('‚úì Teste de integra√ß√£o passou!');
}

testarRegistroUsuario();`,
	},
	{
		id: 9,
		type: 'concept',
		title: 'O que s√£o Testes de Interface (Ponta a Ponta)?',
		conceptTitle: 'üñ±Ô∏è Testes de Interface (Ponta a Ponta):',
		concepts: [
			'Testam a jornada completa do usu√°rio atrav√©s da aplica√ß√£o',
			'Simulam intera√ß√µes reais do usu√°rio com a interface',
			'Verificam se todos os componentes funcionam juntos como esperado',
			'Capturam problemas que os usu√°rios realmente encontrariam',
			'Mais lentos, mas o tipo mais abrangente de teste',
			'Testam a aplica√ß√£o da perspectiva do usu√°rio',
			'Frequentemente envolvem automa√ß√£o de navegador e simula√ß√£o de interface de usu√°rio',
			'Fornecem confian√ßa de que todo o sistema funciona corretamente',
			'Tipicamente comp√µem 5-10% da sua su√≠te de testes',
			'Podem testar atrav√©s de diferentes navegadores e dispositivos',
			'Podem envolver testes com ambientes reais ou de staging',
		],
	},
	{
		id: 10,
		type: 'code-example',
		title: 'Exemplo de Teste de Interface (Ponta a Ponta)',
		conceptTitle: 'üñ±Ô∏è Caracter√≠sticas do Teste de Interface:',
		concepts: [
			'Simula fluxos de trabalho e jornadas completas do usu√°rio',
			'Testa intera√ß√µes e respostas da interface do usu√°rio',
			'Verifica funcionalidade ponta a ponta atrav√©s de todo o sistema',
			'Captura problemas de integra√ß√£o entre frontend e backend',
			'Testa cen√°rios reais de usu√°rio em ambientes similares √† produ√ß√£o',
		],
		implementation:
			'Vamos simular uma aplica√ß√£o de carrinho de compras onde usu√°rios podem adicionar itens, atualizar quantidades, aplicar descontos e finalizar compra. Nosso teste de interface simular√° a jornada completa do usu√°rio desde navegar produtos at√© completar uma compra, testando toda a experi√™ncia do usu√°rio incluindo autentica√ß√£o, gerenciamento de carrinho e processamento de pagamento.',
		codeToTest: `// Simula√ß√£o de carrinho de compras
let carrinho = [];
let estaLogado = false;
let usuarioAtual = null;
let codigoDesconto = null;

function adicionarAoCarrinho(item) {
  const itemExistente = carrinho.find(itemCarrinho => itemCarrinho.id === item.id);
  if (itemExistente) {
    itemExistente.quantidade += item.quantidade;
  } else {
    carrinho.push({ ...item });
  }
  return \`Adicionado \${item.nome} ao carrinho (Qtd: \${item.quantidade})\`;
}

function atualizarQuantidade(itemId, novaQuantidade) {
  const item = carrinho.find(itemCarrinho => itemCarrinho.id === itemId);
  if (!item) {
    return 'Item n√£o encontrado no carrinho';
  }
  if (novaQuantidade <= 0) {
    carrinho = carrinho.filter(itemCarrinho => itemCarrinho.id !== itemId);
    return 'Item removido do carrinho';
  }
  item.quantidade = novaQuantidade;
  return 'Quantidade atualizada com sucesso';
}

function aplicarDesconto(codigo) {
  if (codigo === 'ECONOMIZE10') {
    codigoDesconto = { codigo: 'ECONOMIZE10', desconto: 0.1 };
    return 'Desconto aplicado: 10% de desconto';
  }
  return 'C√≥digo de desconto inv√°lido';
}

function login(nomeUsuario, senha) {
  if (nomeUsuario === 'usuario@exemplo.com' && senha === 'senha123') {
    estaLogado = true;
    usuarioAtual = { email: nomeUsuario, nome: 'Jo√£o Silva' };
    return 'Login realizado com sucesso';
  }
  return 'Credenciais inv√°lidas';
}

function finalizarCompra() {
  if (!estaLogado) {
    return { sucesso: false, erro: 'Por favor, fa√ßa login primeiro' };
  }
  if (carrinho.length === 0) {
    return { sucesso: false, erro: 'Carrinho est√° vazio' };
  }
  
  let total = carrinho.reduce((soma, item) => soma + (item.preco * item.quantidade), 0);
  
  if (codigoDesconto) {
    total = total * (1 - codigoDesconto.desconto);
  }
  
  const itensCompra = [...carrinho];
  carrinho = []; // Limpar carrinho ap√≥s finaliza√ß√£o
  codigoDesconto = null;
  
  return {
    sucesso: true,
    idPedido: 'PED-' + Date.now(),
    itens: itensCompra,
    total: Math.round(total * 100) / 100,
    cliente: usuarioAtual
  };
}`,
		testCode: `// Teste de Interface (Ponta a Ponta) para fluxo de compras
function testarFluxoCompras() {
  // Resetar estado para teste limpo
  carrinho = [];
  estaLogado = false;
  usuarioAtual = null;
  codigoDesconto = null;
  
  console.log('üõí Iniciando teste de fluxo de compras...');
  
  // Passo 1: Adicionar itens ao carrinho
  const notebook = { id: 1, nome: 'Notebook', preco: 2500, quantidade: 1 };
  const mouse = { id: 2, nome: 'Mouse Sem Fio', preco: 80, quantidade: 2 };
  const teclado = { id: 3, nome: 'Teclado Mec√¢nico', preco: 350, quantidade: 1 };
  
  let resultado = adicionarAoCarrinho(notebook);
  if (!resultado.includes('Adicionado Notebook ao carrinho')) {
    throw new Error('Falha ao adicionar notebook ao carrinho');
  }
  
  resultado = adicionarAoCarrinho(mouse);
  if (!resultado.includes('Adicionado Mouse Sem Fio ao carrinho')) {
    throw new Error('Falha ao adicionar mouse ao carrinho');
  }
  
  resultado = adicionarAoCarrinho(teclado);
  if (!resultado.includes('Adicionado Teclado Mec√¢nico ao carrinho')) {
    throw new Error('Falha ao adicionar teclado ao carrinho');
  }
  
  // Passo 2: Atualizar quantidades
  resultado = atualizarQuantidade(2, 3); // Mudar quantidade do mouse para 3
  if (resultado !== 'Quantidade atualizada com sucesso') {
    throw new Error('Falha ao atualizar quantidade do mouse');
  }
  
  // Passo 3: Aplicar c√≥digo de desconto
  resultado = aplicarDesconto('ECONOMIZE10');
  if (!resultado.includes('Desconto aplicado')) {
    throw new Error('Falha ao aplicar c√≥digo de desconto v√°lido');
  }
  
  // Passo 4: Tentar c√≥digo de desconto inv√°lido
  resultado = aplicarDesconto('INVALIDO');
  if (!resultado.includes('C√≥digo de desconto inv√°lido')) {
    throw new Error('C√≥digo de desconto inv√°lido deveria ser rejeitado');
  }
  
  // Passo 5: Tentar finalizar sem login (deveria falhar)
  let resultadoCompra = finalizarCompra();
  if (resultadoCompra.sucesso) {
    throw new Error('Finaliza√ß√£o deveria falhar sem login');
  }
  if (!resultadoCompra.erro.includes('Por favor, fa√ßa login primeiro')) {
    throw new Error('Mensagem de erro errada para finaliza√ß√£o sem autentica√ß√£o');
  }
  
  // Passo 6: Tentar login com credenciais inv√°lidas
  resultado = login('email@errado.com', 'senhaerrada');
  if (resultado !== 'Credenciais inv√°lidas') {
    throw new Error('Login inv√°lido deveria ser rejeitado');
  }
  
  // Passo 7: Login com credenciais v√°lidas
  resultado = login('usuario@exemplo.com', 'senha123');
  if (resultado !== 'Login realizado com sucesso') {
    throw new Error('Login v√°lido falhou');
  }
  
  // Passo 8: Finalizar compra
  resultadoCompra = finalizarCompra();
  if (!resultadoCompra.sucesso) {
    throw new Error('Finaliza√ß√£o falhou: ' + resultadoCompra.erro);
  }
  
  // Verificar detalhes do pedido
  const totalEsperado = (2500 + (80 * 3) + 350) * 0.9; // Com 10% de desconto
  if (Math.abs(resultadoCompra.total - totalEsperado) > 0.01) {
    throw new Error(\`Total incorreto: esperado \${totalEsperado}, obtido \${resultadoCompra.total}\`);
  }
  
  if (resultadoCompra.itens.length !== 3) {
    throw new Error('N√∫mero incorreto de itens no pedido');
  }
  
  if (resultadoCompra.cliente.email !== 'usuario@exemplo.com') {
    throw new Error('Informa√ß√µes incorretas do cliente');
  }
  
  // Passo 9: Verificar se carrinho est√° vazio ap√≥s finaliza√ß√£o
  if (carrinho.length !== 0) {
    throw new Error('Carrinho deveria estar vazio ap√≥s finaliza√ß√£o');
  }
  
  // Passo 10: Tentar finalizar com carrinho vazio
  resultadoCompra = finalizarCompra();
  if (resultadoCompra.sucesso) {
    throw new Error('Finaliza√ß√£o deveria falhar com carrinho vazio');
  }
  
  console.log('‚úì Teste de Interface (Ponta a Ponta) passou!');
  console.log(\`‚úì Pedido \${resultadoCompra.idPedido || 'N/A'} processado com sucesso\`);
}

testarFluxoCompras();`,
	},
	{
		id: 11,
		type: 'patterns',
		title: 'Padr√µes de Teste e Melhores Pr√°ticas',
		patterns: [
			{
				category: 'Padr√µes de Teste',
				items: [
					{
						name: 'Organizar-Agir-Verificar (AAA)',
						icon: 'üéØ',
						description: 'Estruture seus testes em tr√™s fases claras',
						details: [
							'Organizar: Configure dados e condi√ß√µes de teste',
							'Agir: Execute a fun√ß√£o ou a√ß√£o sendo testada',
							'Verificar: Verifique o resultado esperado',
						],
						example:
							"// Organizar\nconst usuario = { nome: 'Jo√£o' };\n// Agir\nconst resultado = cumprimentarUsuario(usuario);\n// Verificar\nexpect(resultado).toBe('Ol√°, Jo√£o!');",
					},
					{
						name: 'Modelo de Objeto de P√°gina (POM)',
						icon: 'üìÑ',
						description:
							'Organize testes de interface com objetos de p√°gina reutiliz√°veis',
						details: [
							'Crie classes representando p√°ginas web',
							'Encapsule elementos e a√ß√µes da p√°gina',
							'Melhora a manutenibilidade e reduz duplica√ß√£o',
						],
						example:
							'class PaginaLogin {\n  inserirNomeUsuario(nomeUsuario) { /* ... */ }\n  inserirSenha(senha) { /* ... */ }\n  clicarLogin() { /* ... */ }\n}',
					},
					{
						name: 'Testes Orientados por Dados',
						icon: 'üìä',
						description:
							'Execute o mesmo teste com diferentes conjuntos de dados',
						details: [
							'Separe l√≥gica de teste dos dados de teste',
							'Teste m√∫ltiplos cen√°rios eficientemente',
							'Use fontes de dados externas (CSV, JSON, bancos de dados)',
						],
						example:
							'const dadosTeste = [\n  { entrada: 5, esperado: 25 },\n  { entrada: 3, esperado: 9 }\n];\ndadosTeste.forEach(dados => {\n  test(`quadrado de ${dados.entrada}`, () => {\n    expect(quadrado(dados.entrada)).toBe(dados.esperado);\n  });\n});',
					},
				],
			},
			{
				category: 'Melhores Pr√°ticas',
				items: [
					{
						name: 'Escreva Testes Claros e Concisos',
						icon: '‚ú®',
						description: 'Torne os testes f√°ceis de ler e entender',
						details: [
							'Use nomes descritivos de teste que expliquem o que est√° sendo testado',
							'Mantenha testes simples e focados em um comportamento',
							'Escreva testes que contem uma hist√≥ria sobre seu c√≥digo',
						],
					},
					{
						name: 'Isolamento de Testes',
						icon: 'üîí',
						description:
							'Garanta que os testes sejam independentes uns dos outros',
						details: [
							'Cada teste deve executar independentemente',
							'Limpe ap√≥s os testes (resetar estado, limpar dados)',
							'Testes n√£o devem depender da ordem de execu√ß√£o',
						],
					},
					{
						name: 'Cobertura de Testes',
						icon: 'üìà',
						description: 'Busque cobertura de teste significativa',
						details: [
							'Foque na l√≥gica de neg√≥cio cr√≠tica e casos extremos',
							'Busque 70-80% de cobertura de c√≥digo como diretriz',
							'Qualidade sobre quantidade - testes significativos importam mais',
						],
					},
					{
						name: 'Conven√ß√µes de Nomenclatura de Testes',
						icon: 'üè∑Ô∏è',
						description: 'Use nomes consistentes e significativos',
						details: [
							"Use nomes descritivos: 'deveria_retornar_erro_quando_email_invalido'",
							'Siga conven√ß√µes da equipe consistentemente',
							'Inclua o comportamento esperado no nome',
						],
					},
					{
						name: 'Execu√ß√£o Regular de Testes',
						icon: 'üîÑ',
						description: 'Execute testes frequentemente e automaticamente',
						details: [
							'Integre testes no seu pipeline de CI/CD',
							'Execute testes antes de fazer commit do c√≥digo',
							'Configure execu√ß√£o autom√°tica de testes em mudan√ßas de c√≥digo',
						],
					},
				],
			},
		],
	},
	{
		id: 12,
		type: 'use-cases',
		title: 'Casos de Uso do Mundo Real',
		useCases: [
			{
				icon: 'üí∞',
				title: 'Bug de C√°lculo Financeiro',
				problem:
					'Um app banc√°rio calcula juros compostos incorretamente, afetando milhares de contas de clientes',
				solution:
					'Testes unit√°rios capturariam o erro matem√°tico imediatamente durante o desenvolvimento antes da implanta√ß√£o',
				example:
					'calcularJurosCompostos(1000, 0.05, 12, 1) deveria retornar 1051.16, n√£o 1500.00',
			},
			{
				icon: 'üìß',
				title: 'Integra√ß√£o de API Quebrada',
				problem:
					'Formul√°rio de contato n√£o envia emails ap√≥s atualiza√ß√£o da API do servi√ßo de email de terceiros',
				solution:
					'Testes de integra√ß√£o verificam se o fluxo formul√°rio ‚Üí valida√ß√£o ‚Üí API ‚Üí entrega de email funciona corretamente',
				example:
					'enviarFormularioContato() ‚Üí validarEntrada() ‚Üí chamarAPIEmail() ‚Üí confirmarEntrega()',
			},
			{
				icon: 'üëÜ',
				title: 'Bot√£o Invis√≠vel no Mobile',
				problem:
					'Bot√£o de envio fica oculto em dispositivos m√≥veis devido a problemas de media query CSS',
				solution:
					'Testes de interface simulam intera√ß√µes m√≥veis e capturam problemas de design responsivo em dispositivos',
				example:
					'clicarBotaoEnviar() deveria disparar envio do formul√°rio em telas de 320px a 1920px',
			},
			{
				icon: 'üîê',
				title: 'Vulnerabilidade de Bypass de Autentica√ß√£o',
				problem:
					'Usu√°rios podem acessar p√°ginas de admin protegidas manipulando par√¢metros de URL',
				solution:
					'Testes ponta a ponta verificam fluxos completos de autentica√ß√£o e verifica√ß√µes de autoriza√ß√£o',
				example:
					'acessarPainelAdmin() deveria redirecionar para login quando usu√°rio n√£o tem privil√©gios de admin',
			},
			{
				icon: 'üí≥',
				title: 'Condi√ß√£o de Corrida no Processamento de Pagamento',
				problem:
					'Site de e-commerce cobra clientes m√∫ltiplas vezes devido a duplo clique no bot√£o de pagamento',
				solution:
					'Testes de integra√ß√£o garantem que processamento de pagamento lida com requisi√ß√µes concorrentes adequadamente',
				example:
					'processarPagamento() ‚Üí prevenirDuplicatas() ‚Üí cobrarCartao() ‚Üí criarPedido()',
			},
			{
				icon: 'üì±',
				title: 'Problema de Compatibilidade Cross-Browser',
				problem:
					'Aplica√ß√£o funciona perfeitamente no Chrome mas quebra nos navegadores Safari e Firefox',
				solution:
					'Testes de interface executam atrav√©s de m√∫ltiplos navegadores para capturar problemas de compatibilidade cedo',
				example:
					'fluxoLoginUsuario() deveria funcionar consistentemente no Chrome, Firefox, Safari e Edge',
			},
		],
	},
	{
		id: 13,
		type: 'quiz',
		title: 'Quiz Interativo',
		questions: [
			{
				question:
					'Qual √© o principal prop√≥sito dos testes unit√°rios no desenvolvimento de software?',
				options: [
					'Testar todo o fluxo de trabalho da aplica√ß√£o do in√≠cio ao fim',
					'Testar fun√ß√µes ou componentes individuais em completo isolamento',
					'Testar intera√ß√µes da interface do usu√°rio e elementos visuais',
					'Testar conex√µes de banco de dados e integra√ß√µes de API externas',
				],
				correctAnswer: 1,
				explanation:
					'Testes unit√°rios focam em testar fun√ß√µes ou componentes individuais em isolamento para garantir que funcionem corretamente por conta pr√≥pria, sem depend√™ncias de outras partes do sistema.',
			},
			{
				question:
					'Na pir√¢mide de testes, qual tipo de teste voc√™ deveria ter mais?',
				options: [
					'Testes de Interface (Ponta a Ponta)',
					'Testes de Integra√ß√£o',
					'Testes Unit√°rios',
					'Testes Manuais',
				],
				correctAnswer: 2,
				explanation:
					'Testes unit√°rios deveriam formar a base da pir√¢mide de testes (70-80% dos testes) porque s√£o r√°pidos, confi√°veis, baratos de manter e ajudam a capturar bugs cedo no desenvolvimento.',
			},
			{
				question:
					'Qual √© a principal vantagem dos testes automatizados sobre testes manuais?',
				options: [
					'√â mais caro mas fornece cobertura mais completa',
					'Fornece feedback mais r√°pido e reduz significativamente erros humanos',
					'S√≥ funciona para aplica√ß√µes simples com funcionalidade b√°sica',
					'Substitui completamente a necessidade de revis√µes de c√≥digo e documenta√ß√£o',
				],
				correctAnswer: 1,
				explanation:
					'Testes automatizados fornecem feedback mais r√°pido durante o desenvolvimento, executam consistentemente sem erro humano e podem ser executados repetidamente como parte de pipelines de CI/CD.',
			},
			{
				question:
					'Quando voc√™ deveria escrever testes de integra√ß√£o na sua estrat√©gia de testes?',
				options: [
					'Apenas depois que todos os testes unit√°rios est√£o completos e passando',
					'Para testar como m√∫ltiplos componentes trabalham juntos e interagem',
					'Em vez de testes unit√°rios para economizar tempo de desenvolvimento',
					'Apenas para componentes de interface de usu√°rio e elementos visuais',
				],
				correctAnswer: 1,
				explanation:
					'Testes de integra√ß√£o s√£o escritos para verificar se m√∫ltiplos componentes funcionam corretamente juntos, testando as interfaces e fluxo de dados entre diferentes partes do sistema.',
			},
			{
				question:
					'Quais caracter√≠sticas tornam um teste unit√°rio eficaz e manuten√≠vel?',
				options: [
					'Testa m√∫ltiplas fun√ß√µes de uma vez para m√°xima efici√™ncia',
					'Requer conex√£o com banco de dados para ser realista e completo',
					'√â r√°pido, confi√°vel, independente e testa uma coisa por vez',
					'S√≥ testa cen√°rios de caminho feliz para economizar tempo',
				],
				correctAnswer: 2,
				explanation:
					'Um bom teste unit√°rio √© r√°pido (executa em milissegundos), confi√°vel (resultados consistentes), independente (n√£o depende de outros testes) e foca em testar um comportamento espec√≠fico com asser√ß√µes claras.',
			},
		],
	},
	{
		id: 14,
		type: 'practice',
		title: 'Pr√°tica Hands-On',
		exercises: [
			{
				title: 'Exerc√≠cio 1: Desafio de Teste Unit√°rio',
				description:
					'Escreva testes unit√°rios abrangentes para uma fun√ß√£o de valida√ß√£o de senha. Teste diferentes cen√°rios incluindo casos extremos e condi√ß√µes de erro:',
				code: `function validarSenha(senha) {
  if (!senha) return { valida: false, erro: 'Senha obrigat√≥ria' };
  if (senha.length < 8) return { valida: false, erro: 'Senha muito curta' };
  if (!/[A-Z]/.test(senha)) return { valida: false, erro: 'Precisa de letra mai√∫scula' };
  if (!/[a-z]/.test(senha)) return { valida: false, erro: 'Precisa de letra min√∫scula' };
  if (!/[0-9]/.test(senha)) return { valida: false, erro: 'Precisa de n√∫mero' };
  if (!/[!@#$%^&*]/.test(senha)) return { valida: false, erro: 'Precisa de caractere especial' };
  return { valida: true, mensagem: 'Senha √© v√°lida' };
}

// Seus testes unit√°rios aqui:
function testarValidacaoSenha() {
  // Teste 1: Senha vazia/nula
  // Teste 2: Senha muito curta (< 8 caracteres)
  // Teste 3: Faltando letra mai√∫scula
  // Teste 4: Faltando letra min√∫scula
  // Teste 5: Faltando n√∫mero
  // Teste 6: Faltando caractere especial
  // Teste 7: Senha v√°lida com todos os requisitos
  // Adicione seus casos de teste abrangentes aqui!
}`,
			},
			{
				title: 'Exerc√≠cio 2: Desafio de Teste de Integra√ß√£o',
				description:
					'Crie um teste de integra√ß√£o para um sistema de posts de blog que valida, salva e notifica assinantes:',
				code: `const posts = [];
const assinantes = ['usuario1@exemplo.com', 'usuario2@exemplo.com'];

function validarPost(post) {
  if (!post.titulo || post.titulo.length < 5) return { valido: false, erro: 'T√≠tulo muito curto' };
  if (!post.conteudo || post.conteudo.length < 50) return { valido: false, erro: 'Conte√∫do muito curto' };
  if (!post.autor || post.autor.length < 2) return { valido: false, erro: 'Autor obrigat√≥rio' };
  return { valido: true };
}

function salvarPost(post) {
  const novoPost = { 
    id: posts.length + 1, 
    ...post, 
    criadoEm: new Date().toISOString(),
    publicado: true
  };
  posts.push(novoPost);
  return novoPost;
}

function notificarAssinantes(post) {
  const notificacoes = assinantes.map(email => ({
    email,
    assunto: \`Novo post: \${post.titulo}\`,
    enviado: true
  }));
  return \`Notificados \${assinantes.length} assinantes sobre: \${post.titulo}\`;
}

function publicarPost(dadosPost) {
  const validacao = validarPost(dadosPost);
  if (!validacao.valido) return { sucesso: false, erro: validacao.erro };
  
  const post = salvarPost(dadosPost);
  const notificacao = notificarAssinantes(post);
  
  return { sucesso: true, post, notificacao };
}

// Seu teste de integra√ß√£o aqui - teste o fluxo completo!`,
			},
			{
				title: 'Exerc√≠cio 3: Desafio de Teste de Interface',
				description:
					'Escreva um teste de interface abrangente para uma aplica√ß√£o de lista de tarefas que cobre o fluxo completo do usu√°rio:',
				code: `let tarefas = [];
let proximoId = 1;
let filtro = 'todas'; // 'todas', 'ativas', 'concluidas'

function adicionarTarefa(texto) {
  if (!texto || !texto.trim()) return { sucesso: false, erro: 'N√£o √© poss√≠vel adicionar tarefa vazia' };
  const tarefa = { id: proximoId++, texto: texto.trim(), concluida: false, criadaEm: new Date() };
  tarefas.push(tarefa);
  return { sucesso: true, mensagem: \`Adicionada: \${tarefa.texto}\`, tarefa };
}

function alternarTarefa(id) {
  const tarefa = tarefas.find(t => t.id === id);
  if (!tarefa) return { sucesso: false, erro: 'Tarefa n√£o encontrada' };
  tarefa.concluida = !tarefa.concluida;
  return { sucesso: true, mensagem: \`\${tarefa.concluida ? 'Conclu√≠da' : 'N√£o conclu√≠da'}: \${tarefa.texto}\` };
}

function excluirTarefa(id) {
  const indice = tarefas.findIndex(t => t.id === id);
  if (indice === -1) return { sucesso: false, erro: 'Tarefa n√£o encontrada' };
  const excluida = tarefas.splice(indice, 1)[0];
  return { sucesso: true, mensagem: \`Exclu√≠da: \${excluida.texto}\` };
}

function definirFiltro(novoFiltro) {
  if (!['todas', 'ativas', 'concluidas'].includes(novoFiltro)) {
    return { sucesso: false, erro: 'Filtro inv√°lido' };
  }
  filtro = novoFiltro;
  return { sucesso: true, mensagem: \`Filtro definido para: \${filtro}\` };
}

function obterTarefasFiltradas() {
  switch (filtro) {
    case 'ativas': return tarefas.filter(t => !t.concluida);
    case 'concluidas': return tarefas.filter(t => t.concluida);
    default: return tarefas;
  }
}

// Teste o fluxo completo do usu√°rio: adicionar, alternar, filtrar, excluir!`,
			},
		],
	},
	{
		id: 15,
		type: 'frameworks',
		title: 'Bons Frameworks de Tecnologia para Testes',
		frameworks: [
			{
				technology: 'Angular',
				name: 'Jasmine + Karma',
				description: 'Framework de testes integrado com Angular CLI',
				link: 'https://angular.io/guide/testing',
				features: [
					'Testes unit√°rios',
					'Testes de integra√ß√£o',
					'E2E com Protractor/Cypress',
				],
			},
			{
				technology: 'C#',
				name: 'xUnit / NUnit / MSTest',
				description: 'Frameworks de teste .NET populares',
				link: 'https://docs.microsoft.com/en-us/dotnet/core/testing/',
				features: [
					'Testes unit√°rios',
					'Testes de integra√ß√£o',
					'Mocking com Moq',
				],
			},
			{
				technology: 'Go',
				name: 'Pacote de Testes Go',
				description: 'Pacote de testes integrado com Go',
				link: 'https://golang.org/pkg/testing/',
				features: [
					'Testes unit√°rios',
					'Benchmarking',
					'Testes orientados por tabela',
				],
			},
			{
				technology: 'Java',
				name: 'JUnit + Mockito',
				description: 'Framework de testes Java padr√£o da ind√∫stria',
				link: 'https://junit.org/junit5/',
				features: [
					'Testes unit√°rios',
					'Testes de integra√ß√£o',
					'Mocking',
					'Testes parametrizados',
				],
			},
			{
				technology: 'JavaScript',
				name: 'Jest',
				description: 'Framework de testes JavaScript delicioso',
				link: 'https://jestjs.io/',
				features: [
					'Testes unit√°rios',
					'Testes de snapshot',
					'Mocking',
					'Cobertura de c√≥digo',
				],
			},
			{
				technology: 'Kotlin',
				name: 'JUnit + MockK',
				description: 'Testes amig√°veis ao Kotlin com MockK',
				link: 'https://mockk.io/',
				features: [
					'Testes unit√°rios',
					'Testes de corrotina',
					'Mocking estilo DSL',
				],
			},
			{
				technology: 'Node.js',
				name: 'Jest / Mocha + Chai',
				description: 'Frameworks de teste Node.js populares',
				link: 'https://mochajs.org/',
				features: ['Testes unit√°rios', 'Testes de integra√ß√£o', 'Testes de API'],
			},
			{
				technology: 'PHP',
				name: 'PHPUnit',
				description: 'O framework de testes PHP',
				link: 'https://phpunit.de/',
				features: [
					'Testes unit√°rios',
					'Testes de integra√ß√£o',
					'Testes de banco de dados',
				],
			},
			{
				technology: 'Python',
				name: 'pytest',
				description: 'Testes Python simples e escal√°veis',
				link: 'https://pytest.org/',
				features: [
					'Testes unit√°rios',
					'Fixtures',
					'Testes parametrizados',
					'Ecossistema de plugins',
				],
			},
			{
				technology: 'React',
				name: 'React Testing Library',
				description: 'Utilit√°rios de teste React DOM simples e completos',
				link: 'https://testing-library.com/docs/react-testing-library/intro/',
				features: [
					'Testes de componente',
					'Testes de intera√ß√£o do usu√°rio',
					'Testes de acessibilidade',
				],
			},
			{
				technology: 'Next.js',
				name: 'Jest + React Testing Library',
				description: 'Next.js com Jest e React Testing Library',
				link: 'https://nextjs.org/docs/testing',
				features: [
					'Testes de componente',
					'Testes de rota API',
					'E2E com Playwright',
				],
			},
			{
				technology: 'React Native',
				name: 'Jest + React Native Testing Library',
				description: 'Testando aplica√ß√µes React Native',
				link: 'https://callstack.github.io/react-native-testing-library/',
				features: [
					'Testes de componente',
					'Testes de navega√ß√£o',
					'Testes de m√≥dulo nativo',
				],
			},
			{
				technology: 'Swift',
				name: 'XCTest',
				description: 'Framework de testes da Apple para Swift/iOS',
				link: 'https://developer.apple.com/documentation/xctest',
				features: [
					'Testes unit√°rios',
					'Testes de interface',
					'Testes de performance',
				],
			},
		],
	},
	{
		id: 16,
		type: 'qa',
		title: 'Perguntas e Discuss√£o',
		questions: [
			{
				icon: 'ü§î',
				title: 'Entendimento',
				text: 'Qual parte dos testes automatizados foi mais confusa? Vamos esclarecer juntos!',
			},
			{
				icon: '‚ö°',
				title: 'Valor Pr√°tico',
				text: 'Qual tipo de teste (Unit√°rio, Integra√ß√£o, Interface) parece mais √∫til para seus projetos atuais?',
			},
			{
				icon: 'üîÑ',
				title: 'Implementa√ß√£o',
				text: 'Quais desafios voc√™ antecipa ao implementar testes automatizados no seu fluxo de trabalho?',
			},
			{
				icon: 'üöÄ',
				title: 'Pr√≥ximos Passos',
				text: 'Quais ferramentas ou frameworks de teste voc√™ gostaria de aprender a seguir?',
			},
			{
				icon: 'üí°',
				title: 'Melhores Pr√°ticas',
				text: 'Quais melhores pr√°ticas de teste da sess√£o de hoje voc√™ implementar√° primeiro?',
			},
			{
				icon: 'üéØ',
				title: 'Aplica√ß√£o no Mundo Real',
				text: 'Como voc√™ pode aplicar esses conceitos de teste aos seus projetos atuais ou futuros?',
			},
		],
	},
]
